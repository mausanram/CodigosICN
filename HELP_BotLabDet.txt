#######################################################################################
###                                                                                 ###
###                           ARCHIVO DE AYUDA PARA EL                              ###
###      BOT PARA MONITOREO DE PARÁMETROS DEL LABORATORIO DE DETECTORES DEL ICN     ###
###                                                                                 ###
###      ULTIMA ACTUALIZACIÓN: 18 DE AGOSTO DEL 2023                                ###
###                                                                                 ###
#######################################################################################

# Funciones importadas
    Del script "AuxiliaresBot.py" se importan las funciones ReadTemp() y dictConfigFile_335(). 
    *** Vaya al archivo "HELP_AuxiliaresBot.txt" para mas detalles de las funciones ***

# Variables Globales
    -> Token: es el token del bot a utilizar. Si se desea cambiar debe crear antes un bot y sustituir su token aquí.

    -> intervalo_de_rutinaTemp: es el tiempo de repetición de la rutina en la alarma de temperatura.

    -> historyTemp_path: es la dirección del archivo de historial de temperatura. Corrobore que sea el correcto.

    -> ConfigFile335_path: es la dirección del archivo de configuración del 335. Corrobore que sea el correcto.

# Definiciones
    # Los comandos "logger.indo()" son auxiliares para ver como es el flujo de código. Activelos si lo requiere. #

    -> async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        Esta función manda un mensaje de inicio al usuario y despliega en pantalla un menu de comandos. 
        *** Para agregar mas comandos debe anexarlos en la lista "reply_keyboard" ***

    -> async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        Manda una un mensaje al usuario en donde se muestran TODOS los posibles comandos y una pequeña descripción de su funcionamiento.
        *** Cuando se agregue una nueva funcionalidad al Bot por favor agregela en la variable "text" ***

    -> async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
        Identifica si alguna palabra ingresada por el usuario NO es un comando válido y manda un mensaje notificando lo anterior.

    -> async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
        Detiene por completo el servidor del Bot. 
        *** Solo debe ocuparse si se desea detener por completo el Bot ya que deberá volver a inicial el servidor despues de utilizar esta función ***

    -> async def ReadTemperature(update: Update, context: ContextTypes.DEFAULT_TYPE):
        Intenta utilizar la función ReadTemp() para leer la última actualización de la temperatura y el heater power.
        - Si logra realizar lo anterior entonces manda estas mediciones al usuario. 
        - Si NO logra realizar lo anterior entonces manda un mensaje al usuario notificando esto y desactiva el servidor del Bot

    -> def Refresh_File(ReferenceValue, NewValue):
        Utiliza dos lecturas, con un delay de tiempo entre ambas, para poder corroborar que el archivo de historial de temperatura
        se está actualizando.
        - Si el archivo se actualiza entonces devuelve un valor booleano True.
        - Si el archivo NO se actualiza entonces devuelve un valor booleano False.

    -> async def Temp_alarm(context: ContextTypes.DEFAULT_TYPE):
        Esta es la rutina que el bot realizará para monitorear los cambios de temperatura del laboatorio:
        1.  Intenta leer el historial de temperatura con la funcion ReadTemp(). Si lo logra rutina continuia,
            caos contrario manda un mensaje notificando al usuario y desactiva el servidor del bot.

        2.  Intenta leer el archivo de configuracion del 335 con la función dictConfigFile_335(). Si lo logra la  rutina continua,
            caso contrario se manda un mensaje notificando al usuario  y las alarmas se desactivan automáticante ya que no se 
            puede comprar la temperatura con el valor del SetPoint actual.
            *** Se debe realizar un script que actualice automáticamente el valor del SetPoint en el historial
                ya que se colocó de manera manual en 170 K***
            
        3.  El proceso se "pausa" para permitir que el historial se actualice. Posteriormente se realiza otra lectura del historial.

        4.  Se llama a la función Refresh_File().
            - Si el archivo se está actualizando entonces se compara el valor de la temperatura 
                con el del SetPoint. Si la diferencia es de 1.5 K, o más, se comenzará a notificar al usuario. 
                La rutina se repite.
            - Si el archivo NO se está actualizando entonces se notifica al usuario y las alarmas se apagan automáticamente ya que no se puede
                realizar la comparación de temperaturas.

    -> async def startAlarm(update: Update, context: ContextTypes.DEFAULT_TYPE):
        Esta función es la que activa la rutina de monitoreo de cambios de la temperatura. 
        - Si la alarma ya está activada, y se vuelve a mandar un comando de activación de alarma, entonces se notifica al usuario
            que la alarma yá está activada.
        - Si la alarma NO está activada entonces comienza con la rutina llamando a la función Temp_alarm y la repetirá indefinidamente
            hasta que la alarma se desactive. El tiempo de repetición de la rutina debe establecerse
            *** Para establecer mejor este tiempo debe tomar en cuenta cada cuanto se actualiza el historial de temperatura y 
                la rampa de cambio de temperatura del 335 para poder detectar mejor si hay algun cambio ***

    -> async def stopAlarm(update: Update, context: ContextTypes.DEFAULT_TYPE):
        Sirve para detener la alarma de temperatura.
        - Si la alarma ya está activada entonces la remueve del hoario de rutinas utilizando el nombre de la rutina ("ReadTempjob").
        - Si la alarma NO está activada entonces se notifica al usuario. 
            *** Se debe estudiar mejor como saber si la rutina existe o no ya que si se agregan mas alarmas esta función ya no será útil ***

# Main
    Aquí se inializa el servidor del Bot: Prueba_Bot o PruebainBot utilizando el token: 5802062802:AAHgtixNr5OnpZF2LOfhLbwqiNh7nikdx8s. Se
    añaden las comandos posibles con su función correspondiente para realizar alguna acción.
    *** Aquí se deben agregar todos los futuros comandos ***

